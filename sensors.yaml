###############################################################################
# Sensors                                                                     #
###############################################################################

# Tides      
# https://www.worldtides.info/ - using custom code to use API v2, see link below:
# https://github.com/jugla/worldtidesinfocustom
# https://www.home-assistant.io/integrations/worldtidesinfo
- platform: worldtidesinfocustom
  name: halifax_tides
  api_key: !secret tides_api_key
  latitude: !secret tides_lat 
  longitude: !secret tides_lon 
  vertical_ref : LAT # see: https://www.worldtides.info/datums 
  scan_interval: 900
  worldtides_request_interval: 43200

# Environment Canada  
# https://www.home-assistant.io/integrations/environment_canada/ 
- platform: environment_canada

# Riemann sum (For Fridge Energy)
# https://www.home-assistant.io/integrations/integration/
- platform: integration 
  source: sensor.sonoff_1000cd8a56_power # POWR2 hooked up to the fridge
  name: fridge_energy_spent
  unit_prefix: k
  unit_time: h
  round: 2

# Riemann sum (For A/V Energy)
# https://www.home-assistant.io/integrations/integration/
- platform: integration 
  source: sensor.sonoff_1000cd8a60_power # POWR2 hooked up to the A/V system
  name: av_energy_spent
  unit_prefix: k
  unit_time: h
  round: 2

# Riemann sum (For Washer Energy)
# https://www.home-assistant.io/integrations/integration/
- platform: integration 
  source: sensor.sonoff_1000cd8a67_power # POWR2 hooked up to the Washer
  name: washer_energy_spent
  unit_prefix: k
  unit_time: h
  round: 2  

- platform: min_max
  type: mean
  name: temperature_mean
  entity_ids:
    - sensor.bme280_temperature
    - sensor.bme280_temperature_2
    - sensor.bme280_temperature_3
    - sensor.bme280_temperature_4

- platform: min_max
  type: mean
  name: humidity_mean
  entity_ids:
    - sensor.bme280_humidity
    - sensor.bme280_humidity_2
    - sensor.bme280_humidity_3
    - sensor.bme280_humidity_4    


################################################################################
# Templates (entity derived sensors)                                           #
# https://www.home-assistant.io/integrations/template/                         # 
################################################################################

# Roomba
- platform: template
  sensors:
    roomba_bin:
      value_template: '{% if is_state("binary_sensor.roomba_bin_full", "on") %}Yes{% else %}No{% endif %}'
      friendly_name: 'Bin Full'

# Tides
- platform: template
  sensors: 
    tide_next_high:
      value_template: '{{ as_timestamp(states.sensor.halifax_tides.attributes.high_tide_time_utc) | timestamp_custom("%H:%M") }}'
      friendly_name: "High Tide"
      icon_template: 'mdi:flag-variant'
    tide_next_low:
      value_template: '{{ as_timestamp(states.sensor.halifax_tides.attributes.low_tide_time_utc) | timestamp_custom("%H:%M") }}'
      friendly_name: "Low Tide"
      icon_template: 'mdi:flag-variant-outline'
    tide_next_high_height:
      value_template: "{{ state_attr('sensor.halifax_tides','high_tide_height')  }}"
      friendly_name: "High Tide Height"
      unit_of_measurement: m
    tide_next_low_height:
      value_template: "{{ state_attr('sensor.halifax_tides','low_tide_height')  }}"
      friendly_name: "Low Tide Height"
      unit_of_measurement: m
    tide_credit:
      value_template: "{{ state_attr('sensor.halifax_tides','CreditCallUsed')  }}"
      friendly_name: "Tide Credit"
      unit_of_measurement: credit
    tide_current_height:
      value_template: "{{ state_attr('sensor.halifax_tides','current_height')  }}"
      friendly_name: "Current Height"
      unit_of_measurement: m

# Pixel 2 Battery      
- platform: template
  sensors:
     battery_phone:
       friendly_name: AndroidPhone Battery
       unit_of_measurement: '%'
       value_template: >-
           {%- if state_attr('device_tracker.pixel_2', 'battery_level') %}
               {{ state_attr('device_tracker.pixel_2', 'battery_level')|round }}
           {% else %}
               {{ states('device_tracker.pixel_2') }}
           {%- endif %}
       device_class: battery

# Internet Speed      
- platform: template
  sensors:
    speedtest_last_updated:
      friendly_name: "Last Updated"
      value_template: "{{ as_timestamp(states.sensor.speedtest_download.last_updated) | timestamp_custom('%I:%M %p %Z') }}"

# Internet Traffic      
- platform: template
  sensors:
    arris_total:
      friendly_name: 'Total Bandwidth'
      unit_of_measurement: 'GBs'
      value_template: "{{((states('sensor.arris_dg2470a_router_b_received') | float / 1000000000) + (states('sensor.arris_dg2470a_router_b_sent') | float / 1000000000))| round(2)}}"
    arris_up:
      friendly_name: 'Upload Bandwidth'
      unit_of_measurement: 'GBs'
      value_template: "{{((states('sensor.arris_dg2470a_router_b_sent') | float / 1000000000))| round(2)}}"
    arris_down:
      friendly_name: 'Download Bandwidth'
      unit_of_measurement: 'GBs'
      value_template: "{{((states('sensor.arris_dg2470a_router_b_received') | float / 1000000000))| round(2)}}"
      
# Fridge Cost
- platform: template
  sensors:
    fridge_cost_daily:
      friendly_name: 'Fridge Daily Cost'
      value_template: "{{ (states('sensor.fridge_daily')|float * states('input_number.energy_cost')|float)|round(2) }}"
      unit_of_measurement: "$"
    fridge_cost_monthly:
      friendly_name: 'Fridge Monthly Cost'
      value_template: "{{ (states('sensor.fridge_monthly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"
    fridge_cost_yearly:
      friendly_name: 'Fridge Yearly Cost'
      value_template: "{{ (states('sensor.fridge_yearly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"

# Washing Machine Cost
- platform: template
  sensors:
    washer_cost_daily:
      friendly_name: 'Washer Daily Cost'
      value_template: "{{ (states('sensor.washer_daily')|float * states('input_number.energy_cost')|float)|round(2) }}"
      unit_of_measurement: "$"
    washer_cost_monthly:
      friendly_name: 'Washer Monthly Cost'
      value_template: "{{ (states('sensor.washer_monthly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"
    washer_cost_yearly:
      friendly_name: 'Washer Yearly Cost'
      value_template: "{{ (states('sensor.washer_yearly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"

# Audio/Video System Cost
- platform: template
  sensors:
    av_cost_daily:
      friendly_name: 'A/V Daily Cost'
      value_template: "{{ (states('sensor.av_daily')|float * states('input_number.energy_cost')|float)|round(2) }}"
      unit_of_measurement: "$"
    av_cost_monthly:
      friendly_name: 'A/V Monthly Cost'
      value_template: "{{ (states('sensor.av_monthly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"
    av_cost_yearly:
      friendly_name: 'A/V Yearly Cost'
      value_template: "{{ (states('sensor.av_yearly')|float * states('input_number.energy_cost')|float)|round(1) }}"
      unit_of_measurement: "$"     



################################################################################
# Rest (Sensors derived from RESTful API endpoints                             #
# https://www.home-assistant.io/integrations/rest/                             # 
################################################################################

# Internet IP
- platform: rest
  resource: http://ip.jsontest.com
  name: External IP
  value_template: '{{ value_json.ip }}'

- platform: rest
  resource: http://192.168.0.19:61208/api/3/mem/used
  name: mem_used 
  method: GET
  headers:
    Accept-encoding: gzip
    Content-Type: application/json
  value_template: '{{ value_json.used| multiply(0.000000954) | round(0) }}'
  unit_of_measurement: MB

- platform: rest
  resource: http://192.168.0.19/61208/api/3/docker
  name: containers_list
  method: GET
  headers:
    Accept-encoding: gzip
    Content-Type: application/json
  value_template: '{{ value_json.used}}'